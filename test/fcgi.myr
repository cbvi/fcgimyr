use std
use fcgi
use thread
use testr

const BeginRequest = 1
const EndRequest = 3
const Params = 4
const Stdin = 5
const Stdout = 6
const GetValues = 9
const GetValuesResponse = 10

const restext = "Content-Type: text/html\r\n\r\ntest"

const sockpath = "unix!/tmp/fcgitest.sock"

var srv
var wg

const cb = {req
	var sb
	var buf
	var stop = false

	sb = std.mksb()

	std.sbputs(sb, restext)

	for param : req.params
		match param
		| ("SERVER_SOFTWARE", v):
			std.sbputs(sb, v)
		| ("TEST_STOP", v):
			stop = true
		| _:
		;;
	;;

	std.sbputs(sb, req.stdin)

	buf = std.sbfin(sb)
	std.try(fcgi.respond(req, buf))

	std.slfree(buf)

	if stop
		fcgi.shutdown(srv)
	;;
}

const main = {
	wg = thread.mkwg(1)
	srv = std.try(fcgi.announce(sockpath))
	var thing

	thing = &fcgi.parseparams

	thread.spawn({
		fcgi.serve(srv, cb)
		thread.wgpost(&wg)
	})

	tests()

	stopsrv()

	thread.wgwait(&wg)

	std.exit(0)
}

const header = {buf, rtype, conlen, padlen
	buf[0] = 1
	buf[1] = rtype
	std.putbe16(buf[2:4], 1)
	std.putbe16(buf[4:6], conlen)
	buf[6] = padlen
	buf[7] = 0
}

const basic_test = {ctx
	var sock = std.try(std.dial(sockpath))

	var hdr : byte[8]
	var buf
	var version, what, id, conlen, padlen

	header(hdr[:], BeginRequest, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Params, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Stdin, 0, 0)
	std.try(std.write(sock, hdr[:]))

	std.try(std.read(sock, hdr[:]))

	version = hdr[0]
	what = hdr[1]
	id = std.getbe16(hdr[2:4])
	conlen = std.getbe16(hdr[4:6])
	padlen = hdr[6]

	testr.check(ctx, version == 1, "wrong version {}", version)
	testr.check(ctx, what == Stdout, "wrong type {}", what)
	testr.check(ctx, id == 1, "wrong id {}", id)
	testr.check(ctx, conlen == restext.len, "wrong conlen {}", conlen)
	testr.check(ctx, padlen == 0, "wrong padlen {}", padlen)

	buf = std.slalloc((conlen + padlen : std.size))

	std.try(std.read(sock, buf))

	match buf
	| restext: testr.ok(ctx)
	| v: testr.fail(ctx, "wrong content \"{}\"", v)
	;;

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[1] == Stdout, "wrong type for final stdout {}", hdr[1])
	testr.check(ctx, std.getbe16(hdr[4:6]) == 0, "final stdout has content")

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[1] == EndRequest, "wrong type for end {}", hdr[1])

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[4] == 0, "wrong protocol status {}", hdr[4])

	std.slfree(buf)
	std.close(sock)
}

const params_test = {ctx
	var sock = std.try(std.dial(sockpath))
	var hdr : byte[8]
	var conlen, padlen, buf
	const params = "\x0b\x80\x00\x01\xE6HTTP_COOKIEmtest=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128; Auth-Type=http; Auth-Token=pfGXCtG1aZnpPIEl25HtTyzBvi77W1M6v07sd1blwIYTAHct" "\x0F\x0DSERVER_SOFTWAREOpenBSD httpd"

	header(hdr[:], BeginRequest, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Params, params.len, 0)
	std.try(std.write(sock, hdr[:]))
	std.try(std.write(sock, params))

	header(hdr[:], Stdin, 0, 0)
	std.try(std.write(sock, hdr[:]))

	std.try(std.read(sock, hdr[:]))

	conlen = std.getbe16(hdr[4:6])
	padlen = std.getbe8(hdr[6:])

	buf = std.slalloc(conlen + padlen)

	std.try(std.read(sock, buf))

	match buf
	| "Content-Type: text/html\r\n\r\ntestOpenBSD httpd": testr.ok(ctx)
	| v: testr.fail(ctx, "wrong content \"{}\"", v)
	;;

	std.try(std.read(sock, hdr[:]))
	std.try(std.read(sock, hdr[:]))
	std.try(std.read(sock, hdr[:]))

	std.slfree(buf)
	std.close(sock)
}

const stdin_test = {ctx
	var sock = std.try(std.dial(sockpath))
	var conlen, padlen, buf
	var hdr : byte[8]
	var stdin
	var sb, sbuf, rbuf
	var expected

	/* use a large allocation to test data transceived in chunks */
	stdin = std.slalloc(330000)

	std.randbytes(stdin[:])

	header(hdr[:], BeginRequest, 0, 255) /* test sending the max padding */
	std.try(std.writeall(sock, hdr[:]))
	std.try(std.writeall(sock, stdin[0:255]))

	header(hdr[:], Params, 0, 0)
	std.try(std.writeall(sock, hdr[:]))

	sbuf = stdin

	while sbuf.len > 0
		const max = 65535
		var len = sbuf.len > max ? max : sbuf.len
		var padding

		padding = std.slalloc(std.rand(0, 255))
		std.randbytes(padding[:])

		header(hdr[:], Stdin, len, padding.len)
		std.try(std.writeall(sock, hdr[:]))
		std.try(std.writeall(sock, sbuf[:len]))
		std.try(std.writeall(sock, padding[:]))

		sbuf = sbuf[len:]
		std.slfree(padding)
	;;

	header(hdr[:], Stdin, 0, 0)
	std.try(std.writeall(sock, hdr[:]))

	sb = std.mksb()

	while true
		std.try(std.readall(sock, hdr[:]))

		conlen = std.getbe16(hdr[4:6])
		padlen = std.getbe8(hdr[6:])

		buf = std.slalloc(conlen + padlen)
		std.try(std.readall(sock, buf))
		std.sbputs(sb, buf)
		std.slfree(buf)

		if conlen == 0
			break
		;;
	;;

	rbuf = std.sbfin(sb)
	expected = std.fmt("{}{}", restext, stdin)

	if std.sleq(expected, rbuf)
		testr.ok(ctx)
	else
		testr.fail(ctx, "data returned didn't match stdin sent")
	;;

	std.try(std.readall(sock, hdr[:]))
	std.try(std.readall(sock, hdr[:]))
	std.try(std.readall(sock, hdr[:]))

	std.slfree(stdin)
	std.slfree(rbuf)
	std.slfree(expected)
	std.close(sock)
}

const getvalues_test = {ctx
	var sock = std.try(std.dial(sockpath))

	var hdr : byte[8]
	var buf
	var version, what, id, conlen, padlen
	var values
	const wantvalues = \
		"\x0E\x00FCGI_MAX_CONNS" \
		"\x0D\x00FCGI_MAX_REQS" \
		"\x0F\x00FCGI_MPXS_CONNS"

	header(hdr[:], BeginRequest, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Params, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], GetValues, wantvalues.len, 0)
	std.try(std.write(sock, hdr[:]))
	std.try(std.write(sock, wantvalues))
	std.try(std.read(sock, hdr[:]))

	what = hdr[1]
	conlen = std.getbe16(hdr[4:6])
	padlen = hdr[6]

	values = std.slalloc((conlen + padlen : std.size))
	std.try(std.read(sock, values))

	testr.check(ctx, what == GetValuesResponse,
		"type should be getvaluesresponse {}", what)
	testr.check(ctx, std.sleq(values[2:17], "FCGI_MAX_CONNS1"),
		"getvalues maxconns response not correct {}", values[2:17])
	testr.check(ctx, std.sleq(values[19:33], "FCGI_MAX_REQS1"),
		"getvalues maxreqs response not correct {}", values[19:33])
	testr.check(ctx, std.sleq(values[35:51], "FCGI_MPXS_CONNS0"),
		"getvalues mpxsconns response not correct {}", values[35:51])

	header(hdr[:], Stdin, 0, 0)
	std.try(std.write(sock, hdr[:]))

	std.try(std.read(sock, hdr[:]))

	version = hdr[0]
	what = hdr[1]
	id = std.getbe16(hdr[2:4])
	conlen = std.getbe16(hdr[4:6])
	padlen = hdr[6]

	testr.check(ctx, version == 1, "wrong version {}", version)
	testr.check(ctx, what == Stdout, "wrong type {}", what)
	testr.check(ctx, id == 1, "wrong id {}", id)
	testr.check(ctx, conlen == restext.len, "wrong conlen {}", conlen)
	testr.check(ctx, padlen == 0, "wrong padlen {}", padlen)

	buf = std.slalloc((conlen + padlen : std.size))

	std.try(std.read(sock, buf))

	match buf
	| restext: testr.ok(ctx)
	| v: testr.fail(ctx, "wrong content \"{}\"", v)
	;;

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[1] == Stdout, "wrong type for final stdout {}", hdr[1])
	testr.check(ctx, std.getbe16(hdr[4:6]) == 0, "final stdout has content")

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[1] == EndRequest, "wrong type for end {}", hdr[1])

	std.try(std.read(sock, hdr[:]))
	testr.check(ctx, hdr[4] == 0, "wrong protocol status {}", hdr[4])

	std.slfree(buf)
	std.close(sock)
}

const stopsrv = {
	var sock = std.try(std.dial(sockpath))
	var hdr : byte[8]
	var conlen, padlen, buf
	const params = "\x09\x01TEST_STOP1"

	header(hdr[:], BeginRequest, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Params, params.len, 0)
	std.try(std.write(sock, hdr[:]))
	std.try(std.write(sock, params))

	header(hdr[:], Stdin, 0, 0)
	std.try(std.write(sock, hdr[:]))

	std.try(std.read(sock, hdr[:]))

	conlen = std.getbe16(hdr[4:6])
	padlen = std.getbe8(hdr[6:])

	buf = std.slalloc(conlen + padlen)

	std.try(std.read(sock, buf))

	std.try(std.read(sock, hdr[:]))
	std.try(std.read(sock, hdr[:]))
	std.try(std.read(sock, hdr[:]))

	std.slfree(buf)
	std.close(sock)
}


const tests = {
	testr.run([
		[.name="basic", .fn={ctx
			basic_test(ctx)
		}],
		[.name="params", .fn={ctx
			params_test(ctx)
		}],
		[.name="stdin", .fn={ctx
			stdin_test(ctx)
		}],
		[.name="getvalues", .fn={ctx
			getvalues_test(ctx)
		}],
	][:])
}
