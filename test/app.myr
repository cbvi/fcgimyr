use std
use fcgi
use thread
use testr

const BeginRequest = 1
const EndRequest = 3
const Params = 4
const Stdin = 5
const Stdout = 6

const restext = "Content-Type: text/html\r\n\r\ntest"

const cb = {req
	std.try(fcgi.respond(req, restext))
}

const main = {
	var srv

	srv = std.try(fcgi.announce("unix!/tmp/fcgitest.sock"))

	thread.spawn({
		fcgi.serve(srv, cb)
	})

	tests()

	fcgi.shutdown(srv)
}

const header = {buf, rtype, conlen, padlen
	buf[0] = 1
	buf[1] = rtype
	std.putbe16(buf[2:4], 1)
	std.putbe16(buf[4:6], conlen)
	buf[6] = padlen
	buf[7] = 0
}

const header_test = {ctx, sock
	var hdr : byte[8]
	var version, what, id, conlen, padlen

	header(hdr[:], BeginRequest, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Params, 0, 0)
	std.try(std.write(sock, hdr[:]))

	header(hdr[:], Stdin, 0, 0)
	std.try(std.write(sock, hdr[:]))

	std.try(std.read(sock, hdr[:]))

	version = hdr[0]
	what = hdr[1]
	id = std.getbe16(hdr[2:4])
	conlen = std.getbe16(hdr[4:6])
	padlen = hdr[6]

	testr.check(ctx, version == 1, "wrong version {}", version)
	testr.check(ctx, what == Stdout, "wrong type {}", what)
	testr.check(ctx, id == 1, "wrong id {}", id)
	testr.check(ctx, conlen == restext.len, "wrong conlen {}", conlen)
	testr.check(ctx, padlen == 0, "wrong padlen {}", padlen)
}

const content_test = {ctx, sock
	var content = std.slalloc(restext.len)

	std.try(std.read(sock, content))

	match content
	| restext: testr.ok(ctx)
	| v: testr.fail(ctx, "wrong content \"{}\"", v)
	;;
}

const tests = {
	var sock

	sock = std.try(std.dial("unix!/tmp/fcgitest.sock"))

	testr.run([
		[.name="header", .fn={ctx
			header_test(ctx, sock)
		}],
		[.name="content", .fn={ctx
			content_test(ctx, sock)
		}],
	][:])

	std.close(sock)
}
