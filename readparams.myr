use std

pkg fcgi =
	const parse_params	: (buf : byte[:] -> std.htab(byte[:], byte[:])#)
;;

const getval = {buf, keylen, vallen
	var key, val

	if buf.len >= keylen
		key = buf[:keylen]
		buf = buf[keylen:]
	else
		goto err
	;;

	if buf.len >= vallen
		val = buf[:vallen]
		buf = buf[vallen:]
	else
		goto err
	;;

	-> `std.Some ((key, val), buf)

:err
	-> `std.None
}

const getlen = {buf
	var lens : uint32[2]

	for var i = 0; i < 2; i++
		if buf[0] >> 7 == 0
			if buf.len <= 1
				goto err
			;;
			lens[i] = (buf[0] : uint32)
			buf = buf[1:]
		else
			if buf.len <= 4
				goto err
			;;
			lens[i] = (((buf[0] : uint32) & 0x7f) << 24) + \
				((buf[1] : uint32) << 16) + \
				((buf[2] : uint32) << 8) + \
				((buf[3] : uint32))
			buf = buf[4:]
		;;
	;;

	-> `std.Some ((lens[0], lens[1]), buf)

:err
	-> `std.None
}

const parse_params = {buf : byte[:]
	var keylen, vallen
	var key, val
	var ht

	ht = std.mkht()

	while buf.len > 0
		match getlen(buf)
		| `std.Some (lens, b):
			(keylen, vallen) = lens
			buf = b
		| `std.None: break
		;;

		match getval(buf, keylen, vallen)
		| `std.Some (kv, b):
			(key, val) = kv
			buf = b
		| `std.None: break
		;;

		std.put("{} {}\n", key, val)

		std.htput(ht, key, val)
	;;

	//std.put("{}\n", std.get(std.htget(ht, "HTTP_COOKIE")))

	//std.htfree(ht)

	-> ht
}

/*
const main = {
	var txt

	txt = std.try(std.slurp("params.txt"))

	parse_params(txt)
}
*/
