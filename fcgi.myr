use std
use thread
use utilfcgi

use "types"

pkg fcgi =
	const announce		: (ds : byte[:] -> std.result(server#, error))
	const respond		: (req : request#, data : byte[:] -> std.result(void, error))
	const serve		: (srv : server#, fn : (req : request# -> void) -> void)
	const shutdown		: (srv : server# -> void)
;;

const respond = {req, data
	var buf : byte[utilfcgi.Headerlen]

	if !utilfcgi.sendrecord(req.fd, utilfcgi.Stdout, req.id, data)
		goto short
	;;

	utilfcgi.endrequestdata(buf[:], 0, utilfcgi.RequestComplete)

	if !utilfcgi.sendrecord(req.fd, utilfcgi.EndRequest, req.id, buf[:])
		goto short
	;;

	-> `std.Ok void

:short
	-> `std.Err `Eshort
}

const readrequest = {req
	var err
	var content : byte[65535+255]
	var buf, params, stdin

	params = std.mksb()
	stdin = std.mksb()

	while true
		var version, what, id, conlen

		match utilfcgi.readrecord(req.fd, content[:])
		| `std.Some res:
			(version, what, id, conlen) = res
		| `std.None:
			err = `Econn
			goto err
		;;

		if version != utilfcgi.Version
			err = `Eversion version
			goto err
		;;

		if req.id != 0 && req.id != id
			err = `Emis
			goto err
		;;

		buf = content[:conlen]

		match what
		| utilfcgi.BeginRequest:
			req.id = id
		| utilfcgi.Params:
			std.sbputs(params, buf)
		| utilfcgi.Stdin:
			if conlen == 0
				break
			;;
			std.sbputs(stdin, buf)
		| utilfcgi.GetValues:
			getvalues(req, buf)
		| _:
			err = `Etype what
			goto err
		;;
	;;

	req.paramb = std.sbfin(params)
	req.stdin = std.sbfin(stdin)

	req.params = utilfcgi.parseparams(req.paramb)

	-> `std.Ok void

:err
	std.sbfree(params)
	std.sbfree(stdin)
	-> `std.Err err
}

const getvalues = {req, buf
	var have : (byte[:], byte[:])[3]
	var want, encoded, ret
	var i = 0

	want = utilfcgi.parseparams(buf)

	for (hk, hv) : fcgi.Values
		for (wk, _) : want
			if std.sleq(hk, wk)
				have[i++] = (hk, hv)
			;;
		;;
	;;

	encoded = utilfcgi.encodeparams(have[:i])

	ret = utilfcgi.sendrecord(req.fd, utilfcgi.GetValuesResult, req.id, encoded)

	std.slfree(encoded)

	-> ret
}

const reqfree = {req
	std.close(req.fd)
	std.slfree(req.params)
	std.slfree(req.paramb)
	std.slfree(req.stdin)
}

const shutdown = {srv
	srv.running = false
	std.aclose(srv.ann)
}

const serve_cb = {fd, fn
	var req : request

	req.id = 0
	req.params = [][:]
	req.paramb = [][:]
	req.fd = fd
	req.stdin = [][:]

	match readrequest(&req)
	| `std.Ok _:
	| `std.Err e: goto end
	;;

	fn(&req)

:end
	reqfree(&req)
}

const serve = {srv, fn
	while srv.running
		match std.accept(srv.ann)
		| `std.Ok fd:
			serve_cb(fd, fn)
		| `std.Err _:
		;;
	;;

	std.free(srv)
}

const announce = {ds
	match std.announce(ds)
	| `std.Ok a:
		-> `std.Ok std.mk([
			.ann = a,
			.running = true
		])
	| `std.Err e:
		-> `std.Err `Econn
	;;
}
