use std
use bio
use sys
use "types"

type role = union
	`Responder
	`Authorizer
	`Filter
;;

type requesttype = union
	`Begin
	`Params
	`Stdin
;;

const HEADER_LEN = 8

const parse_beginrequest = {buf
	var role, rolen, flags

	rolen = std.getbe16(buf[0:2])
	flags = buf[2]

	match rolen
	| 1: role = `Responder
	| 2: role = `Authorizer
	| 3: role = `Filter
	| _: std.fatal("{}\n", "unknown role")
	;;

	-> (role, flags)
}

const parse_params = {buf
	std.put("{}\n", buf)
}

const parse_stdin = {buf
	std.put("{}\n", buf)
}

const read_header = {sock
	var buf : byte[HEADER_LEN]
	var version, typ, id, len, pad, res
	var content, padding
	var rtype

	match std.read(sock, buf[:])
	| `std.Ok s:
		version = buf[0]
		typ = buf[1]
		id = std.getbe16(buf[2:4])
		len = std.getbe16(buf[4:6])
		pad = std.getbe8(buf[6:7])
		res = buf[7]
	| `std.Err n: std.fatal("{}\n", n)
	;;

	match typ
	| 1: rtype = `Begin
	| 4: rtype = `Params
	| 5: rtype = `Stdin
	| _: std.fatal("unknown type {}\n", typ)
	;;

	std.put("{}\n", rtype)

	content = std.slalloc(len)

	match std.read(sock, content)
	| `std.Ok s:
	| `std.Err n: std.fatal("{}\n", n)
	;;

	if pad > 0
		padding = std.slalloc(pad)
		std.read(sock, padding)
		std.slfree(padding)
	;;

	-> (rtype, content)
}

const main = {
	var sock
	var path
	var fd
	var ret

	path = "/var/www/run/test.sock"

	sock = std.try(std.announce("unix!/var/www/run/test.sock"))

	sys.chown(sys.cstring(path), 67, 67)

	match std.accept(sock)
	| `std.Ok r: fd = r
	| `std.Err e: std.fatal("{}\n", e)
	;;

	while true
		var rtype, content

		(rtype, content) = read_header(fd)

		match rtype
		| `Begin: std.put("{}\n", parse_beginrequest(content))
		| `Params: parse_params(content)
		| `Stdin: 
			parse_stdin(content)
			break
		| _: std.fatal("unknown {}\n", rtype)
		;;
	;;

	std.put("{}\n", "here")

	ret = std.slalloc(8)

	var starth = "Content-Type: text/html\r\n\r\nhello"

	ret[0] = 0
	ret[1] = 6
	std.putbe16(ret[2:], 1)
	std.putbe16(ret[4:], starth.len)
	ret[6] = 0
	ret[7] = 0

	std.try(std.write(fd, ret))
	std.try(std.write(fd, starth))

	std.put("{}\n", "did write")

	std.slfree(ret)

	ret = std.slalloc(8+8)

	ret[0] = 0
	ret[1] = 3
	std.putbe16(ret[2:], 1)
	std.putbe16(ret[4:], 8)
	ret[6] = 0
	ret[7] = 0

	for b : ret
		std.put("{}\n", b)
	;;

	std.try(std.write(fd, ret[0:8]))

	std.slfree(ret)

	ret = std.slalloc(8)

	std.putbe32(ret[0:], 0)
	ret[4] = 0

	ret[5] = 0
	ret[6] = 0
	ret[7] = 0

	std.try(std.write(fd, ret))

	std.slfree(ret)

	std.put("{}\n", "finished request")

	std.put("{}\n", "the end")
}
