use std

use "defines"
use "records"

pkg utilfcgi =
	const sendrecord	: (fd : std.fd, what : rtype, id : uint16, content : byte[:] -> bool)
	const readrecord	: (fd : std.fd, content : byte[:] -> std.option((byte, rtype, uint16, std.size)))
	const readheader	: (fd : std.fd -> std.option((byte, rtype, uint16, std.size, std.size)))
;;

const sendrecord = {fd, what, id, content
	var header : byte[Headerlen]
	var sendempty
	var len

	sendempty = isstream(what) && content.len > 0

	while true
		len = content.len > Contentmax ? Contentmax : content.len

		prepareheader(header[:], what, id, (len : uint16))

		match std.writeall(fd, header[:])
		| `std.Ok sz:
			if sz < header.len
				goto err
			;;
		| `std.Err _: goto err
		;;

		match std.writeall(fd, content[:len])
		| `std.Ok sz: content = content[sz:]
		| `std.Err _: goto err
		;;

		if content.len == 0
			if !sendempty
				break
			else
				sendempty = false
			;;
		;;
	;;

	-> true

:err
	-> false
}

const readrecord = {fd, content
	var buf : byte[Headerlen]
	var version, what, id, conlen, padlen
	var len

	match readheader(fd)
	| `std.Some s: (version, what, id, conlen, padlen) = s
	| `std.None: goto err
	;;

	len = conlen + padlen

	match std.readall(fd, content[:len])
	| `std.Ok sz:
		if sz < len
			goto err
		;;
	| `std.Err _: goto err
	;;

	-> `std.Some (version, what, id, conlen)

:err
	-> `std.None
}

const readheader = {fd
	var buf : byte[Headerlen]
	var version, what, id, conlen, padlen

	match std.readall(fd, buf[:])
	| `std.Ok sz:
		if sz < buf.len
			goto err
		;;
	| `std.Err _: goto err
	;;

	version		= buf[0]
	what		= (buf[1] : rtype)
	id		= std.getbe16(buf[2:4])
	conlen		= (std.getbe16(buf[4:6]) : std.size)
	padlen		= (buf[6] : std.size)
	/* reserved	= buf[7] */

	-> `std.Some (version, what, id, conlen, padlen)

:err
	-> `std.None
}
